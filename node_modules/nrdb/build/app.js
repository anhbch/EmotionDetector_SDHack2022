'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PRIVATE = exports.PUBLIC = exports.API = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.card = card;
exports.cards = cards;
exports.cycle = cycle;
exports.cycles = cycles;
exports.decklist = decklist;
exports.decklistByDate = decklistByDate;
exports.faction = faction;
exports.factions = factions;
exports.mwl = mwl;
exports.pack = pack;
exports.packs = packs;
exports.prebuilts = prebuilts;
exports.side = side;
exports.sides = sides;
exports.type = type;
exports.types = types;

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var API = exports.API = 'https://netrunnerdb.com/api/2.0/';
var PUBLIC = exports.PUBLIC = API + 'public/';
var PRIVATE = exports.PRIVATE = API + 'private/';

// CARD
function card(id) {
  return get(PUBLIC + 'card/' + id);
}

function cards() {
  return get(PUBLIC + 'cards');
}

// CYCLE
function cycle(code) {
  return get(PUBLIC + 'cycle/' + code);
}

function cycles() {
  return get(PUBLIC + 'cycles/');
}

// DECKLISTS
function decklist(id) {
  return get(PUBLIC + 'decklist/' + id);
}

function decklistByDate(date) {
  if (!date) date = new Date();

  var str = void 0;

  if ((typeof date === 'undefined' ? 'undefined' : _typeof(date)) == 'object') {
    //Lmao date conversion.
    var day = pad(date.getDate().toString());
    var month = pad((date.getMonth() + 1).toString());
    var year = pad(date.getFullYear().toString());

    str = year + '-' + month + '-' + day;
  } else if (typeof date == 'string') {
    str = date;
  }

  return get(PUBLIC + 'decklists/by_date/' + str);

  function pad(what) {
    if (what.length < 1) return "00" + what;else if (what.length < 2) return "0" + what;else return what;
  }
}

// FACTION
function faction(code) {
  return get(PUBLIC + 'faction/' + code);
}

function factions() {
  return get(PUBLIC + 'factions');
}

// MWL
function mwl() {
  return get(PUBLIC + 'mwl');
}

// PACK
function pack(code) {
  return get(PUBLIC + 'pack/' + code);
}

function packs() {
  return get(PUBLIC + 'packs');
}

// PREBUILT
function prebuilts() {
  return get(PUBLIC + 'prebuilts');
}

// SIDE
function side(code) {
  return get(PUBLIC + 'side/' + code);
}

function sides() {
  return get(PUBLIC + 'sides');
}

// TYPE
function type(code) {
  return get(PUBLIC + 'type/' + code);
}

function types() {
  return get(PUBLIC + 'types');
}

function get(url) {
  return (0, _nodeFetch2.default)(url).then(function (res) {
    if (res.ok) return res.json().then(function (json) {
      return json.data;
    });

    throw new Error(res.status + ' ' + res.statusText);
  });
}