{"mappings":"AACA,IAAIA,QAEAC,MACAC,OACAC,YAHAC,WAAa,GAKbC,YAAc,EACdC,UAAY,EACZC,YAAc,EAEdC,UAAY,EACZC,QAAU,EACVC,UAAY,EAEhB,SAASC,QACPT,OAASU,aAAa,IAAK,KAC3BV,OAAOW,GAAG,UAEVZ,MAAQa,cAAcC,OACtBd,MAAMY,GAAG,SACTZ,MAAMe,KAAKC,MAAOC,QAElBf,YAAc,CACZgB,eAAe,EACfC,iBAAiB,EACjBC,iBAAiB,EACjBC,cAAe,IAIjBtB,QAAUuB,IAAIC,QAAQvB,MAAOE,YAAasB,WAK5C,SAASC,QACP1B,QAAUuB,IAAIC,QAAQvB,MAAOE,YAAasB,WAG5C,SAASA,YACPzB,QAAQ2B,OAAOC,UASjB,SAASA,SAASC,EAAOC,GACnBD,EACFE,QAAQC,IAAIH,IAIdzB,WAAa0B,EAGbG,QACAC,SAAS9B,YACT+B,cAAc/B,YACdgC,gBAAgBhC,WAAY,GAAI,IAAK,IACrCJ,QAAQ2B,OAAOC,WAMjB,SAASM,SAASG,GAChB,GAAIA,EAAWC,OAAS,EACtB,IAAKC,EAAE,EAAGA,EAAIF,EAAWC,OAAQC,IAAI,CACnC,IAAIC,GAACA,EAAEC,GAAEA,EAAEC,OAAEA,EAAMC,QAAEA,GAAWN,EAAWE,GAAGK,YAAYC,KAC1DC,OAAO,GAAI,IAAK,KAChBC,aAAa,GACbC,SACAC,KAAKT,EAAIC,EAAIC,EAAQC,IAQ3B,SAASR,cAAce,GACrB,GAAIA,EAAWZ,OAAS,EACtB,IAAKC,EAAE,EAAGA,EAAIW,EAAWZ,OAAQC,IAAI,CACnC,IAAIY,EAASD,EAAWX,GAAGa,UAAUC,UACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOb,OAAQgB,IACjCR,OAAO,GAAI,IAAK,KAChBC,aAAa,GACbQ,MAAMJ,EAAOG,GAAGd,GAAIW,EAAOG,GAAGb,KAStCe,eAAepB,gBAAgBqB,EAAYC,EAAGC,EAAGC,GAC/C,GAAGH,EAAWnB,OAAS,EAAE,CACvB,IAAIuB,QAACA,EAAOC,MAAEA,EAAKC,MAAEA,EAAKC,IAAEA,EAAGC,UAAEA,EAASC,UAAEA,EAASC,QAAEA,GAAWV,EAAW,GAAGW,YAChFC,SAAS,kBACTC,SAAS,IACTC,WACAC,KAAK,GAAI,IAAK,KAIdC,WAAWC,GAAS,IAANZ,EAAW,EAAG,GAAGY,GAAO,IAAJV,EAAS,EAAG,GAAGU,GAAS,IAANX,EAAW,EAAG,IAQ/DD,GAAS,MACVzD,aAAe,EACfG,WAAasD,GAEZE,GAAO,MACR1D,WAAa,EACbG,SAAWuD,GAEVD,GAAS,IACVxD,aAAe,EACfG,WAAaqD,GAEfY,aAAaC,QAAQ,gBAAgBpE,UAAUH,aAC/CsE,aAAaC,QAAQ,cAAcnE,QAAQH,WAC3CqE,aAAaC,QAAQ,gBAAgBlE,UAAUH,cA0BnD,SAASkE,WAAWX,EAAOE,EAAKD,GAC9Bc,SAASC,KAAKC,SAAS,GAAGD,KAAK,GAAKhB,EACpCe,SAASC,KAAKC,SAAS,GAAGD,KAAK,GAAKd,EACpCa,SAASC,KAAKC,SAAS,GAAGD,KAAK,GAAKf,EACpCc,SAASG","sources":["public/sketch.js"],"sourcesContent":["\nlet faceapi;\nlet detections = [];\nlet video;\nlet canvas;\nlet faceOptions;\n\nlet happy_count = 0;\nlet sad_count = 0;\nlet angry_count = 0;\n\nlet happy_sum = 0;\nlet sad_sum = 0;\nlet angry_sum = 0;\n\nfunction setup() {\n  canvas = createCanvas(480, 360);\n  canvas.id(\"canvas\");\n\n  video = createCapture(VIDEO);// Creat the video\n  video.id(\"video\");\n  video.size(width, height);\n\n  faceOptions = {\n    withLandmarks: true,\n    withExpressions: true,\n    withDescriptors: true,\n    minConfidence: 0.5\n  };\n\n  //Initialize the model:\n  faceapi = ml5.faceApi(video, faceOptions, faceReady);\n}\n/**\n * Main function: Start detecting face and emotion\n */\nfunction start(){\n  faceapi = ml5.faceApi(video, faceOptions, faceReady);\n}\n\nfunction faceReady() {\n  faceapi.detect(gotFaces);// Start detecting faces:\n}\n\n/**\n * recursive funtion\n * @param {*} error \n * @param {*} result \n * @returns \n */\nfunction gotFaces(error, result) {\n  if (error) {\n    console.log(error);\n    return;\n  }\n\n  detections = result;//Now all the data in this detections: \n  // console.log(detections);\n\n  clear();//Draw transparent background;: \n  drawBoxs(detections);//Draw detection box: \n  drawLandmarks(detections);//// Draw all the face points: \n  drawExpressions(detections, 20, 250, 14);//Draw face expression:\n  faceapi.detect(gotFaces);// Call the function again at here:\n}\n\n/**\n * Helper function: Draw box\n */\nfunction drawBoxs(detections){\n  if (detections.length > 0) {//If at least 1 face is detected:\n    for (f=0; f < detections.length; f++){\n      let {_x, _y, _width, _height} = detections[f].alignedRect._box;\n      stroke(44, 169, 225);\n      strokeWeight(1);\n      noFill();\n      rect(_x, _y, _width, _height);\n    }\n  }\n}\n\n/**\n * Helper function: draw landmark\n */\nfunction drawLandmarks(detections){\n  if (detections.length > 0) {//If at least 1 face is detected:\n    for (f=0; f < detections.length; f++){\n      let points = detections[f].landmarks.positions;\n      for (let i = 0; i < points.length; i++) {\n        stroke(44, 169, 225);\n        strokeWeight(3);\n        point(points[i]._x, points[i]._y);\n      }\n    }\n  }\n}\n\n/**\n * Helper function: Draw expression\n */\nasync function drawExpressions(detections, x, y, textYSpace){\n  if(detections.length > 0){//If at least 1 face is detected: \n    let {neutral, happy, angry, sad, disgusted, surprised, fearful} = detections[0].expressions;\n    textFont('Helvetica Neue');\n    textSize(14);\n    noStroke();\n    fill(44, 169, 225);\n    /**\n     * Update bar chart data\n     */\n    updateData(nf(happy*100, 2, 2),nf(sad*100, 2, 2),nf(angry*100, 2, 2));\n    /**\n     * Collect emotion data\n     */\n    const data = {happy, angry, sad};\n    /**\n     * local storage\n     */\n    if(happy >= 0.05){\n      happy_count += 1;\n      happy_sum += happy;\n    }\n    if(sad >= 0.05){\n      sad_count += 1;\n      sad_sum += sad;\n    }\n    if(angry >= 0){\n      angry_count += 1;\n      angry_sum += angry;\n    }\n    localStorage.setItem(\"overall_happy\",happy_sum/happy_count);\n    localStorage.setItem(\"overall_sad\",sad_sum/sad_count);\n    localStorage.setItem(\"overall_angry\",angry_sum/angry_count);\n    // const options ={\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json'\n    //   },\n    //   body: JSON.stringify(data)\n    // }\n    // const response = await fetch('/api', options);\n    // const json = await response.json();\n    // console.log(json);\n  }else{//If no faces is detected:\n    // text(\"neutral: \", x, y);\n    // text(\"happiness: \", x, y + textYSpace);\n    // text(\"anger: \", x, y + textYSpace*2);\n    // text(\"sad: \", x, y + textYSpace*3);\n    // text(\"disgusted: \", x, y + textYSpace*4);\n    // text(\"surprised: \", x, y + textYSpace*5);\n    // text(\"fear: \", x, y + textYSpace*6);\n  }\n}\n\n\n/**\n * Helper Function: update bar chart data\n */\nfunction updateData(happy, sad, angry){\n  barChart.data.datasets[0].data[0] = happy;\n  barChart.data.datasets[0].data[1] = sad;\n  barChart.data.datasets[0].data[2] = angry;\n  barChart.update();\n}"],"names":["faceapi","video","canvas","faceOptions","detections","happy_count","sad_count","angry_count","happy_sum","sad_sum","angry_sum","setup","createCanvas","id","createCapture","VIDEO","size","width","height","withLandmarks","withExpressions","withDescriptors","minConfidence","ml5","faceApi","faceReady","start","detect","gotFaces","error","result","console","log","clear","drawBoxs","drawLandmarks","drawExpressions","detections1","length","f","_x","_y","_width","_height","alignedRect","_box","stroke","strokeWeight","noFill","rect","detections2","points","landmarks","positions","i","point","async","detections3","x","y","textYSpace","neutral","happy","angry","sad","disgusted","surprised","fearful","expressions","textFont","textSize","noStroke","fill","updateData","nf","localStorage","setItem","barChart","data","datasets","update"],"version":3,"file":"index.64691676.js.map"}